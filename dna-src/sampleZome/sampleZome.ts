'use strict';

// -----------------------------------------------------------------
//  This stub Zome code file was auto-generated by hc-scaffold
// -----------------------------------------------------------------

// -----------------------------------------------------------------
//  Exposed functions with custom logic https://developer.holochain.org/API_reference
// -----------------------------------------------------------------

/**
 * Add a text string to the chain
 * @param {String} entry 
 * @return {String} hash
 */
const sampleEntryCreate =(entry:String):String=>{
  const hash = commit("sampleEntry", entry);
  commit("sampleLink", {
    Links: [
      {Base: App.Key.Hash, Link: hash, Tag: 'text'}
    ]
  });
  return hash;
}

/**
 * Fetch a list of all text strings added to the chain
 * @param {String} sampleEntryHash (Not used! Example)
 * @return {Array<String>} Array of String links
 */
const sampleEntryList=(sampleEntryHash: String|null):Array<String>=> {
  return getLinks(App.Key.Hash, "text", {Load: true}).map(e => e.Entry);
}


// -----------------------------------------------------------------
//  The Genesis Function https://developer.holochain.org/genesis
// -----------------------------------------------------------------

/**
 * Called only when your source chain is generated
 * @return {Boolean} success
 */
const genesis=():Boolean=> {
  return true;
}

// -----------------------------------------------------------------
//  Validation functions for every change to the local chain or DHT
// -----------------------------------------------------------------

/**
 * Called to validate any changes to the local chain or DHT
 * @param {String} entryName - the type of entry
 * @param {any} entry - the entry data to be set
 * @param {Header} header - header for the entry containing properties EntryLink, Time, and Type
 * @param {PackageRequest} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {Array<String>} sources - an array of strings containing the keys of any authors of this entry
 * @return {Boolean} is valid?
 */
const validateCommit=(entryName:String, entry:any|null, header:Header|null, pkg:PackageRequest|null, sources:Array<String>|null):boolean=> {
  switch (entryName) {
    case "sampleEntry":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {String} entryName - the type of entry
 * @param {any} entry - the entry data to be set
 * @param {Header} header - header for the entry containing properties EntryLink, Time, and Type
 * @param {PackageRequest} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {Array<String>} sources - an array of strings containing the keys of any authors of this entry
 * @return {Boolean} is valid?
 */
const validatePut=(entryName:String, entry:any|null, header:Header|null, pkg:PackageRequest|null, sources:Array<String>|null):Boolean=> {
  switch (entryName) {
    case "sampleEntry":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {String} entryName - the type of entry
 * @param {any|null} entry - the entry data to be set
 * @param {Header|null} header - header for the entry containing properties EntryLink, Time, and Type
 * @param {String|null} replaces - the hash for the entry being updated
 * @param {PackageRequest|null} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {Array<String>|null} sources - an array of strings containing the keys of any authors of this entry
 * @return {Boolean} is valid?
 */
const validateMod=(entryName:String, entry:any|null, header:Header|null, replaces:String|null, pkg:PackageRequest|null, sources:Array<String>|null):Boolean=> {
  switch (entryName) {
    case "sampleEntry":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {String} entryName - the type of entry
 * @param {String|null} hash - the hash of the entry to remove
 * @param {PackageRequest|null} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {Array<String>|null} sources - an array of strings containing the keys of any authors of this entry
 * @return {Boolean} is valid?
 */
const validateDel=(entryName:String, hash:String|null, pkg:PackageRequest|null, sources:Array<String>|null):Boolean=> {
  switch (entryName) {
    case "sampleEntry":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {String} entryName - the type of entry
 * @param {String|null} baseHash - the hash of the base entry being linked
 * @param {Array<String>|null} links - Array of links
 * @param {PackageRequest|null} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {Array<String>|null} sources - an array of strings containing the keys of any authors of this entry
 * @return {Boolean} is valid?
 */
const validateLink=(entryName:String, baseHash:String|null, links:Array<String>|null, pkg:PackageRequest|null, sources:Array<String>|null):Boolean=> {
  switch (entryName) {
    case "sampleEntry":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to get the data needed to validate
 * @param {String} entryName - the name of entry to validate
 * @return {null} the data required for validation
 */
const validatePutPkg=(entryName:String):null=> {
  return null;
}

/**
 * Called to get the data needed to validate
 * @param {String} entryName - the name of entry to validate
 * @return {null} the data required for validation
 */
const validateModPkg=(entryName:String):null=> {
  return null;
}

/**
 * Called to get the data needed to validate
 * @param {String} entryName - the name of entry to validate
 * @return {null} the data required for validation
 */
const validateDelPkg=(entryName:String):null=> {
  return null;
}

/**
 * Called to get the data needed to validate
 * @param {String} entryName - the name of entry to validate
 * @return {null} the data required for validation
 */
const validateLinkPkg=(entryName):null=> {
  return null;
}